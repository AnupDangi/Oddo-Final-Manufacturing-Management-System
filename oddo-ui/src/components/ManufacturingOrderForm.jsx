import React, { useState, useEffect } from 'react';
import { ArrowLeft, Search, Plus } from 'lucide-react';
import { manufacturingOrderService, productService, bomService } from '../services/api';

const ManufacturingOrderForm = ({ onNavigate }) => {
  const [formData, setFormData] = useState({
    reference: 'MO-000001', // Will be auto-generated by backend
    finishedProduct: '',
    finishedProductId: '',
    quantity: '',
    billOfMaterial: '',
    assignee: '',
    scheduleDate: '',
    priority: 'Normal',
    description: ''
  });
  
  const [components, setComponents] = useState([]);
  const [workOrders, setWorkOrders] = useState([]);
  const [status, setStatus] = useState('Draft');
  const [loading, setLoading] = useState(false);
  const [productSearchResults, setProductSearchResults] = useState([]);
  const [showProductSearch, setShowProductSearch] = useState(false);
  const [productSearchQuery, setProductSearchQuery] = useState('');
  const [errors, setErrors] = useState({});

  // Auto-search products when user types
  useEffect(() => {
    if (productSearchQuery.length > 2) {
      searchProducts(productSearchQuery);
    } else {
      setProductSearchResults([]);
    }
  }, [productSearchQuery]);

  // Auto-populate BOM components when product is selected
  useEffect(() => {
    if (formData.finishedProductId && formData.quantity) {
      fetchBOMForProduct(formData.finishedProductId);
    }
  }, [formData.finishedProductId, formData.quantity]);

  const searchProducts = async (query) => {
    try {
      const response = await productService.getAll({ 
        search: query, 
        category: 'Finished Good',
        is_active: true 
      });
      if (response.success) {
        setProductSearchResults(response.data || []);
      }
    } catch (error) {
      console.error('Product search error:', error);
      setProductSearchResults([]);
    }
  };

  const fetchBOMForProduct = async (productId) => {
    try {
      setLoading(true);
      const response = await bomService.getAll({ product: productId });
      if (response.success && response.data && response.data.length > 0) {
        const activeBOM = response.data.find(bom => bom.is_active) || response.data[0];
        setFormData(prev => ({
          ...prev,
          billOfMaterial: activeBOM.reference || `BOM-${activeBOM._id.slice(-6)}`
        }));
        
        // Calculate components based on quantity
        if (activeBOM.components && formData.quantity) {
          const calculatedComponents = activeBOM.components.map(comp => ({
            name: comp.component_product?.name || 'Unknown Component',
            sku: comp.component_product?.sku || '',
            availability: comp.component_product?.quantity_on_hand || 0,
            toConsume: comp.quantity_required * parseFloat(formData.quantity),
            units: comp.component_product?.unit_of_measure || 'Units',
            component_product: comp.component_product?._id,
            quantity_required: comp.quantity_required * parseFloat(formData.quantity)
          }));
          setComponents(calculatedComponents);
        }
      } else {
        setFormData(prev => ({ ...prev, billOfMaterial: '' }));
        setComponents([]);
      }
    } catch (error) {
      console.error('BOM fetch error:', error);
      setComponents([]);
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));

    // Clear errors when user starts typing
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }

    // Update product search query for finished product
    if (name === 'finishedProduct') {
      setProductSearchQuery(value);
      setShowProductSearch(value.length > 0);
      if (value === '') {
        setFormData(prev => ({ ...prev, finishedProductId: '', billOfMaterial: '' }));
        setComponents([]);
      }
    }
  };

  const handleProductSelect = (product) => {
    setFormData(prev => ({
      ...prev,
      finishedProduct: product.name,
      finishedProductId: product._id
    }));
    setShowProductSearch(false);
    setProductSearchQuery('');
    setProductSearchResults([]);
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.finishedProduct) newErrors.finishedProduct = 'Finished product is required';
    if (!formData.quantity || parseFloat(formData.quantity) <= 0) newErrors.quantity = 'Valid quantity is required';
    if (!formData.scheduleDate) newErrors.scheduleDate = 'Schedule date is required';
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleConfirm = async () => {
    if (!validateForm()) {
      return;
    }

    try {
      setLoading(true);

      // Prepare manufacturing order data
      const orderData = {
        product_search: formData.finishedProduct,
        quantity: parseFloat(formData.quantity),
        planned_start_date: new Date().toISOString(), // Current date as start
        planned_end_date: new Date(formData.scheduleDate).toISOString(),
        assignee: formData.assignee || undefined,
        priority: formData.priority,
        description: formData.description || undefined,
        // work_center: formData.work_center || undefined // Add if you have work center selection
      };

      // Create manufacturing order using product search API
      const response = await manufacturingOrderService.createByProductSearch(orderData);

      if (response.success) {
        // Navigate to confirmed view with the created order data
        onNavigate('manufacturing-order-confirmed', { 
          orderData: response.data.manufacturing_order,
          bomDetails: response.data.bom_details 
        });
      } else {
        setErrors({ general: response.message || 'Failed to create manufacturing order' });
      }
    } catch (error) {
      console.error('Manufacturing order creation error:', error);
      setErrors({ 
        general: error.message || 'Failed to create manufacturing order. Please try again.' 
      });
    } finally {
      setLoading(false);
    }
  };

  const handleBack = () => {
    onNavigate('dashboard');
  };

  const getStatusClass = (statusName) => {
    if (status === statusName) {
      switch (statusName) {
        case 'Draft': return 'bg-gray-800 text-white';
        case 'Confirmed': return 'bg-blue-600 text-white';
        case 'In-Progress': return 'bg-yellow-600 text-white';
        case 'To Close': return 'bg-orange-600 text-white';
        case 'Done': return 'bg-green-600 text-white';
        default: return 'bg-gray-100 text-gray-800';
      }
    }
    return 'bg-gray-100 text-gray-800';
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="bg-white border-b border-gray-200 shadow-sm p-6">
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-2xl font-bold text-gray-900">Manufacturing Order</h1>
            
            <div className="flex space-x-2">
              <button 
                onClick={handleConfirm}
                disabled={loading || !formData.finishedProduct || !formData.quantity || !formData.scheduleDate}
                className={`px-4 py-2 rounded-lg flex items-center space-x-2 ${
                  loading || !formData.finishedProduct || !formData.quantity || !formData.scheduleDate
                    ? 'bg-gray-400 cursor-not-allowed' 
                    : 'bg-blue-600 hover:bg-blue-700'
                } text-white`}
              >
                {loading && (
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                )}
                <span>{loading ? 'Creating...' : 'Confirm'}</span>
              </button>
              <button 
                onClick={handleBack}
                disabled={loading}
                className="px-4 py-2 border border-gray-300 hover:bg-gray-100 text-gray-700 rounded-lg flex items-center space-x-2 disabled:opacity-50"
              >
                <ArrowLeft size={16} />
                <span>Back</span>
              </button>
            </div>
          </div>
          
          <div className="bg-white border border-gray-200 rounded-lg shadow-sm mb-6">
            <div className="p-6 border-b border-gray-200">
              <div className="flex justify-between items-start mb-6">
                <div className="flex items-start space-x-4">
                  <div className="border-2 border-dashed border-red-400 rounded-md p-2">
                    <p className="text-red-600 font-medium">{formData.reference}</p>
                  </div>
                  <div>
                    <p className="text-xs text-gray-500">Always auto generate, when clicked on new</p>
                    <p className="text-xs text-gray-500">and number would follow the sequence</p>
                  </div>
                </div>
                
                <div className="flex space-x-2">
                  <button className={`px-4 py-2 rounded-md ${getStatusClass('Draft')}`}>
                    Draft
                  </button>
                  <button className={`px-4 py-2 rounded-md ${getStatusClass('Confirmed')}`}>
                    Confirmed
                  </button>
                  <button className={`px-4 py-2 rounded-md ${getStatusClass('In-Progress')}`}>
                    In-Progress
                  </button>
                  <button className={`px-4 py-2 rounded-md ${getStatusClass('To Close')}`}>
                    To Close
                  </button>
                  <button className={`px-4 py-2 rounded-md ${getStatusClass('Done')}`}>
                    Done
                  </button>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Finished product <span className="text-red-500">*</span>
                    </label>
                    <div className="relative">
                      <input
                        type="text"
                        name="finishedProduct"
                        value={formData.finishedProduct}
                        onChange={handleInputChange}
                        placeholder="Search for a product..."
                        className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                          errors.finishedProduct ? 'border-red-500' : 'border-gray-300'
                        }`}
                        required
                      />
                      <Search className="absolute right-3 top-2.5 h-5 w-5 text-gray-400" />
                      
                      {/* Product search dropdown */}
                      {showProductSearch && productSearchResults.length > 0 && (
                        <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto">
                          {productSearchResults.map((product) => (
                            <div
                              key={product._id}
                              onClick={() => handleProductSelect(product)}
                              className="px-4 py-2 hover:bg-gray-100 cursor-pointer"
                            >
                              <div className="font-medium">{product.name}</div>
                              <div className="text-sm text-gray-500">SKU: {product.sku}</div>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                    {errors.finishedProduct && (
                      <p className="text-red-500 text-xs mt-1">{errors.finishedProduct}</p>
                    )}
                  </div>
                  
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Quantity <span className="text-red-500">*</span>
                    </label>
                    <div className="flex items-center">
                      <input
                        type="number"
                        name="quantity"
                        value={formData.quantity}
                        onChange={handleInputChange}
                        min="1"
                        step="1"
                        className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                          errors.quantity ? 'border-red-500' : 'border-gray-300'
                        }`}
                        required
                      />
                      <span className="ml-2 text-gray-600">Units</span>
                    </div>
                    {errors.quantity && (
                      <p className="text-red-500 text-xs mt-1">{errors.quantity}</p>
                    )}
                  </div>
                  
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Bill of Material
                    </label>
                    <input
                      type="text"
                      name="billOfMaterial"
                      value={formData.billOfMaterial}
                      readOnly
                      placeholder="Will auto-populate when product is selected"
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-600"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Auto-populated based on the selected finished product
                    </p>
                  </div>

                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Priority
                    </label>
                    <select
                      name="priority"
                      value={formData.priority}
                      onChange={handleInputChange}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="Low">Low</option>
                      <option value="Normal">Normal</option>
                      <option value="High">High</option>
                      <option value="Urgent">Urgent</option>
                    </select>
                  </div>
                </div>
                
                <div>
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Schedule Date <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="date"
                      name="scheduleDate"
                      value={formData.scheduleDate}
                      onChange={handleInputChange}
                      min={new Date().toISOString().split('T')[0]}
                      className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                        errors.scheduleDate ? 'border-red-500' : 'border-gray-300'
                      }`}
                      required
                    />
                    {errors.scheduleDate && (
                      <p className="text-red-500 text-xs mt-1">{errors.scheduleDate}</p>
                    )}
                    <p className="text-xs text-gray-500 mt-1">
                      Expected delivery date
                    </p>
                  </div>
                  
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Assignee
                    </label>
                    <input
                      type="text"
                      name="assignee"
                      value={formData.assignee}
                      onChange={handleInputChange}
                      placeholder="Select assignee (optional)"
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Responsible person for this order
                    </p>
                  </div>

                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Description
                    </label>
                    <textarea
                      name="description"
                      value={formData.description}
                      onChange={handleInputChange}
                      placeholder="Additional notes or instructions..."
                      rows="3"
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                </div>
              </div>

              {/* Error display */}
              {errors.general && (
                <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
                  {errors.general}
                </div>
              )}
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-0">
              <div className="border-r border-gray-200">
                <div className="p-6">
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="text-lg font-semibold">Components</h2>
                    {loading && (
                      <div className="text-sm text-gray-500">Loading components...</div>
                    )}
                  </div>
                  
                  {formData.finishedProduct && !formData.billOfMaterial && !loading && (
                    <div className="mb-4 p-3 bg-yellow-100 border border-yellow-400 text-yellow-700 rounded">
                      No BOM found for selected product. Components cannot be auto-populated.
                    </div>
                  )}
                  
                  <table className="min-w-full">
                    <thead>
                      <tr className="border-b border-gray-200">
                        <th className="text-left py-2 text-sm font-medium text-gray-700">Component</th>
                        <th className="text-left py-2 text-sm font-medium text-gray-700">Available</th>
                        <th className="text-left py-2 text-sm font-medium text-gray-700">Required</th>
                        <th className="text-left py-2 text-sm font-medium text-gray-700">Units</th>
                      </tr>
                    </thead>
                    <tbody>
                      {components.length === 0 && !loading && (
                        <tr>
                          <td colSpan="4" className="py-6 text-center text-sm text-gray-500">
                            {formData.finishedProduct 
                              ? "Select quantity to see required components"
                              : "Select a finished product to see components"
                            }
                          </td>
                        </tr>
                      )}
                      {components.map((component, index) => (
                        <tr key={index} className="border-b border-gray-100">
                          <td className="py-3 text-sm">
                            <div>
                              <div className="font-medium">{component.name}</div>
                              {component.sku && (
                                <div className="text-xs text-gray-500">SKU: {component.sku}</div>
                              )}
                            </div>
                          </td>
                          <td className="py-3 text-sm">
                            <span className={component.availability >= component.toConsume ? 'text-green-600' : 'text-red-600'}>
                              {component.availability}
                            </span>
                          </td>
                          <td className="py-3 text-sm font-medium">{component.toConsume}</td>
                          <td className="py-3 text-sm text-gray-600">{component.units}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                  
                  {components.length > 0 && (
                    <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded">
                      <p className="text-sm text-blue-800">
                        <strong>{components.length}</strong> components auto-populated from BOM.
                        {components.some(c => c.availability < c.toConsume) && (
                          <span className="block mt-1 text-red-600">
                            ⚠️ Some components have insufficient stock.
                          </span>
                        )}
                      </p>
                    </div>
                  )}
                </div>
              </div>
              
              <div>
                <div className="p-6">
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="text-lg font-semibold">Work Orders</h2>
                  </div>
                  
                  <div className="text-center py-8">
                    <div className="bg-gray-100 rounded-lg p-6">
                      <div className="text-gray-500 mb-2">
                        <Plus className="mx-auto h-12 w-12 text-gray-400" />
                      </div>
                      <h3 className="text-lg font-medium text-gray-900 mb-2">
                        Work Orders Will Be Generated
                      </h3>
                      <p className="text-sm text-gray-600 mb-4">
                        Work orders will be automatically generated after the manufacturing order is confirmed, 
                        based on the operations defined in the BOM.
                      </p>
                      <div className="text-xs text-gray-500 space-y-1">
                        <p>• Operations will be derived from BOM</p>
                        <p>• Work centers will be assigned</p>
                        <p>• Duration will be calculated</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ManufacturingOrderForm;